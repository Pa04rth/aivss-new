#!/usr/bin/env python3
"""
Environment configuration helper for AutoHardener
Helps you set up the .env file with proper values
"""

import os
import sys
from pathlib import Path

# Add the backend directory to Python path
backend_dir = Path(__file__).parent
sys.path.insert(0, str(backend_dir))

def get_user_input(prompt, default=None, required=True):
    """Get user input with validation"""
    while True:
        if default:
            user_input = input(f"{prompt} [{default}]: ").strip()
            if not user_input:
                user_input = default
        else:
            user_input = input(f"{prompt}: ").strip()
        
        if user_input or not required:
            return user_input
        else:
            print("‚ùå This field is required. Please enter a value.")

def setup_n8n_oauth():
    """Set up n8n OAuth configuration"""
    print("\nüîó n8n OAuth Configuration")
    print("=" * 30)
    print("To get these values:")
    print("1. Go to https://app.n8n.cloud/settings")
    print("2. Navigate to 'OAuth Applications'")
    print("3. Create a new OAuth application")
    print("4. Set redirect URI to: http://localhost:3000/api/n8n/callback")
    print()
    
    client_id = get_user_input("n8n Client ID")
    client_secret = get_user_input("n8n Client Secret")
    
    return {
        'N8N_CLIENT_ID': client_id,
        'N8N_CLIENT_SECRET': client_secret,
        'N8N_REDIRECT_URI': 'http://localhost:3000/api/n8n/callback',
        'N8N_AUTH_URL': 'https://app.n8n.cloud/oauth/authorize',
        'N8N_TOKEN_URL': 'https://app.n8n.cloud/oauth/token'
    }

def setup_database():
    """Set up database configuration"""
    print("\nüóÑÔ∏è Database Configuration")
    print("=" * 25)
    print("Choose your database:")
    print("1. SQLite (default, easy setup)")
    print("2. PostgreSQL (recommended for production)")
    print("3. MySQL")
    print()
    
    choice = get_user_input("Choose database type (1-3)", "1", required=False)
    
    if choice == "2":
        print("\nPostgreSQL Configuration:")
        host = get_user_input("Database host", "localhost")
        port = get_user_input("Database port", "5432")
        database = get_user_input("Database name", "autohardener_db")
        username = get_user_input("Database username", "autohardener_user")
        password = get_user_input("Database password")
        
        database_url = f"postgresql://{username}:{password}@{host}:{port}/{database}"
        
    elif choice == "3":
        print("\nMySQL Configuration:")
        host = get_user_input("Database host", "localhost")
        port = get_user_input("Database port", "3306")
        database = get_user_input("Database name", "autohardener_db")
        username = get_user_input("Database username", "autohardener_user")
        password = get_user_input("Database password")
        
        database_url = f"mysql://{username}:{password}@{host}:{port}/{database}"
        
    else:
        database_url = "sqlite:///./platform_connections.db"
    
    return {'DATABASE_URL': database_url}

def setup_google_api():
    """Set up Google API configuration"""
    print("\nü§ñ Google Gemini API Configuration")
    print("=" * 35)
    print("To get your API key:")
    print("1. Go to https://makersuite.google.com/app/apikey")
    print("2. Create a new API key")
    print("3. Copy the API key")
    print()
    
    api_key = get_user_input("Google Gemini API Key")
    
    return {'GOOGLE_API_KEY': api_key}

def create_env_file(config):
    """Create .env file with configuration"""
    env_file = Path(__file__).parent / '.env'
    
    # Generate encryption key
    from cryptography.fernet import Fernet
    encryption_key = Fernet.generate_key().decode()
    
    env_content = f"""# AutoHardener Environment Configuration
# Generated by setup script

# Database Configuration
DATABASE_URL={config.get('DATABASE_URL', 'sqlite:///./platform_connections.db')}

# Encryption Key for OAuth tokens (KEEP THIS SECURE!)
ENCRYPTION_KEY={encryption_key}

# n8n OAuth Configuration
N8N_CLIENT_ID={config.get('N8N_CLIENT_ID', 'your_n8n_client_id_here')}
N8N_CLIENT_SECRET={config.get('N8N_CLIENT_SECRET', 'your_n8n_client_secret_here')}
N8N_REDIRECT_URI={config.get('N8N_REDIRECT_URI', 'http://localhost:3000/api/n8n/callback')}
N8N_AUTH_URL={config.get('N8N_AUTH_URL', 'https://app.n8n.cloud/oauth/authorize')}
N8N_TOKEN_URL={config.get('N8N_TOKEN_URL', 'https://app.n8n.cloud/oauth/token')}

# Google Gemini API Key
GOOGLE_API_KEY={config.get('GOOGLE_API_KEY', 'your_gemini_api_key_here')}

# Optional: Logging level
LOG_LEVEL=INFO
"""
    
    with open(env_file, 'w') as f:
        f.write(env_content)
    
    print(f"\n‚úÖ Created .env file at {env_file}")
    return env_file

def main():
    """Main configuration function"""
    print("‚öôÔ∏è AutoHardener Environment Setup")
    print("=" * 35)
    print("This script will help you configure your .env file")
    print()
    
    config = {}
    
    # Set up database
    config.update(setup_database())
    
    # Set up Google API
    config.update(setup_google_api())
    
    # Set up n8n OAuth
    config.update(setup_n8n_oauth())
    
    # Create .env file
    env_file = create_env_file(config)
    
    print("\nüéâ Configuration completed!")
    print("\nüìã Next steps:")
    print("1. Review the .env file to ensure all values are correct")
    print("2. Run: python setup_database.py")
    print("3. Run: python app.py")
    print("4. Open: http://localhost:3000")
    
    print(f"\nüìÅ Your .env file is located at: {env_file}")

if __name__ == "__main__":
    main()


